{
    "project": {},
    "files": {
        "bin\\$dom_component.js": {
            "name": "bin\\$dom_component.js",
            "modules": {},
            "classes": {
                "$dom.{namespace}": 1,
                "$dom.component": 1
            },
            "fors": {
                "$dom.{namespace}": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "$dom.{namespace}": {
            "name": "$dom.{namespace}",
            "shortname": "$dom.{namespace}",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "bin\\$dom_component.js",
            "line": 5,
            "description": "This NAMESPACE provides features for DOM elemnts.",
            "static": 1
        },
        "$dom.component": {
            "name": "$dom.component",
            "shortname": "$dom.component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "bin\\$dom_component.js",
            "line": 77,
            "description": "This 'functional class' is syntax sugar around [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) for creating DOM components and their adding to live DOM in performance friendly way.",
            "version": "1.0.0",
            "is_constructor": 1,
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, …).\n - This is parent element of component.",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mapUpdate",
                            "description": "- `[params.mapUpdate=undefined]`\n - This function (if defined) remap `update(DATA)` to varibales used in keys `attrs.onupdate` … see [`add`](#methods_add)",
                            "type": "Function|Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "- 'functional class instance': object `{ add, component, mount, update, share, onupdate }`\n - `share` is Object for transfering methods somewhere else (like for using in another component, see [`component`](#methods_component))\n     - `share= { mount, update, destroy, isStatic }`\n - `onupdate`\n     - It returns {$dom.component} and it is only one differnece against [`add`](#methods_add)\n     - `onupdate` is function which accepts two params `object, function`, the function is called during creating element and evry `update`calls\n     - It returns additional `attrs`, for example this `attrs`: `$dom.component(\"DIV\", { className: \"class\" }).onupdate({ a }, _=>({ textContent: a }))` => final `attrs= { className: \"class\", textContent: \"A\" }` (if `a=\"A\"`)\n     - it use [`$dom.assign`](./$dom.{namespace}.html#methods_assign) (**no deep copy!!!**)",
                "type": "$dom.component"
            }
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "bin\\$dom_component.js",
            "line": 11,
            "description": "Procedure removes all children of `container`",
            "itemtype": "method",
            "name": "empty",
            "params": [
                {
                    "name": "container",
                    "description": "",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 20,
            "description": "Procedure places `new_element` after `reference` elements",
            "itemtype": "method",
            "name": "insertAfter",
            "params": [
                {
                    "name": "new_element",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "reference",
                    "description": "",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 31,
            "description": "Procedure replaces `el_old` element by new one (`new_el`)",
            "itemtype": "method",
            "name": "replace",
            "params": [
                {
                    "name": "el_old",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "el_new",
                    "description": "",
                    "type": "NodeElement"
                }
            ],
            "class": "$dom.{namespace}"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 120,
            "description": "This add element to component",
            "itemtype": "method",
            "name": "add",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "el_name",
                    "description": "- Name of element (for example `LI`, `P`, `A`, ...).",
                    "type": "String"
                },
                {
                    "name": "attrs",
                    "description": "- `null|undefined` is also supported (`null` is probably recommendet for better readability)\n - The second argument for [`$dom.assign`](./$dom.{namespace}.html#methods_assign)",
                    "type": "Object"
                },
                {
                    "name": "shift",
                    "description": "\n - Modify nesting behaviour. By default (`shift= 0`), new element is child of previus element. Every `-1` means moving to the upper level against current one - see example.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": " 0"
                }
            ],
            "return": {
                "description": "- `getReference` {Function}: return NodeElement reference of added element\n - `onupdate`\n     - Pattern: `add(...).onupdate(Values: Object, Retuns_attrs_keys: Function)`\n     - This register listener/subscriber function (`Retuns_attrs_keys`) for keys (variables) in `Values`\n     - Example: `add(...).onupdate({counter}, _=>({ textContent: counter }))` registers listerner to `counter`. When the `udate({ ... counter: something, ...})` is called this element changes `textContent`.\n     - See [`update`](#methods_update)",
                "type": "Object"
            },
            "example": [
                "\n     const UL= document.getElementById('SOME UL');\n     const { add }= $dom.component(\"LI\", { className: \"list_item\" });\n     //result: <li class=\"list_item\">...</li>\n     add(\"DIV\", { textContent: \"Child of .list_item\", className: \"deep1\" });\n     //result: <li class=\"list_item\"><div class=\"deep1\">...</div></li>\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2\" });\n         //result: ...<div class=\"deep1\"><div class=\"deep2\">...</div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3\" });\n             //result: ...<div class=\"deep1\"><div class=\"deep2\"><div class=\"deep3\">...</div></div></div>...\n             add(\"DIV\", { textContent: \"Child of div.deep2\", className: \"deep3 mark\" }, -1);\n             //result: ...<div class=\"deep2\"><div class=\"deep3\">...</div><div class=\"deep3\">...</div></div>...\n     //next add(*) schoul be child of div.deep3.mark, by -1 it is ch.of div.deep2, by -2 ch.of div.deep1, by -3 ch.of li.list_item because div.deep3.mark is on 3rd level\n         add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);\n         //result: this is on 2nd level\n     add(\"DIV\", { textContent: \"Child of div.deep1\", className: \"deep2 nextone\" }, -2);\n     //result: this is on 0 level\n         add(\"DIV\", null);\n         //just DIV without attributes"
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 179,
            "description": "This add element to component",
            "itemtype": "method",
            "name": "addText",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "text",
                    "description": "- Argument for `document.createTextNode`",
                    "type": "String"
                },
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "- `oninit` {Function}: TBD",
                "type": "Object"
            },
            "example": [
                "\n     function testTextLi({ href= \"https://www.seznam.cz\" }= {}){\n         const { add, addText, share }= $dom.component(\"LI\", null);\n             add(\"P\", { textContent: \"Link test: \" });\n                 add(\"A\", { textContent: \"link \", href });\n                     add(\"STRONG\", { textContent: `(${href.replace(\"https://www.\", \"\")})` });\n                 addText(\"!\", -2);\n                 add(\"BR\", null, -1);\n                 addText(\"Test new line.\", -1);\n         return share;\n     }\n     //result: '<p>Link test: <a href=\"...\">link <strong>...</strong></a>!<br>Test new line.</p>'"
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 212,
            "description": "Method for including another component by usint its `share` key.",
            "itemtype": "method",
            "name": "component",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "share",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 231,
            "description": "Add element to live DOM",
            "itemtype": "method",
            "name": "mount",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "element",
                    "description": "- Element where to places this component",
                    "type": "NodeElement"
                },
                {
                    "name": "type",
                    "description": "\n - Change type of mounting\n - `childLast` places component as last child\n - `childFirst` places component as first child\n - `replaceContent` removes content of `element` and places component as child (uses `$dom.empty`)\n - `replace` replaces `element` by component\n - `before` places component before `element`\n - `after` places component after `element` (uses `$dom.insertAfter`)",
                    "type": "String",
                    "optional": true,
                    "optdefault": " \"childLast\""
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 269,
            "description": "Method remove element form live DOM and returns null",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "example": [
                "\n     let { share: test }= $dom.component(\"DIV\", null);\n     test.mount(document.body);\n     test= test.destroy();"
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 283,
            "description": "Updates `deep`",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "recalculateDeep",
            "params": [
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 295,
            "description": "Returns parent element (or \"fragment pseudo element\")",
            "itemtype": "method",
            "name": "getParentElement",
            "access": "private",
            "tagname": "",
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 304,
            "description": "Method provide way to change nesting behaviour. It can be helpful for loops",
            "itemtype": "method",
            "name": "setShift",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "shift",
                    "description": "- see [`add`](#methods_add)",
                    "type": "Number"
                }
            ],
            "example": [
                "\n     function testNesting(){\n         const { add, setShift, share }= $dom.component(\"DIV\", null);\n             setShift(0);\n         for(let i= 0; i<5; i++){\n             add(\"P\", { textContent: `Paragraph no. ${i}.` }, -1);\n         }\n         return share;\n     }"
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 326,
            "description": "Initialize internal storage",
            "itemtype": "method",
            "name": "initStorage",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "- `{ register, registerComponent, update, unregister}`",
                "type": "Object"
            },
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 404,
            "description": "Method updates all registered varibles by keys `onupdates` and calls follower functions",
            "itemtype": "method",
            "name": "update",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "new_data",
                    "description": "- When `$dom.component` is initialized, it is possible to register `mapUpdate`\n - **It's because internally, it is used `Object.assign` (no deep copy) to merge new data with older one!!!**\n - It is also possible to register function to detect changes itself see examples",
                    "type": "Object|Function"
                }
            ],
            "example": [
                "\n     // SIMPLE example\n     const data_A= { a: \"A\" };\n     const data_A_update= { a: \"AAA\" };\n     const { add, mount, update }= $dom.component(\"UL\", null);\n         add(\"LI\", { onupdate: [ data_A, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\"\n     mount(document.body);\n     update(data_A_update);\n     // EXAMPLE WITH `mapUpdate`\n     const data_B= { a: { b: \"A\" }};\n     const data_B_update= { a: { b: \"AAA\" }};\n     const { add, mount, update }= $dom.component(\"UL\", null, { mapUpdate: d=>({ a: d.a.b }) });\n         add(\"LI\", { onupdate: [ data_B, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\" see `mapUpdate`\n     mount(document.body);\n     update(data_B_update);\n     // EXAMPLE WITH FUNCTION AS ARGUMENT OF `update`\n     const { add, mount, update }= $dom.component(\"UL\", null, { mapUpdate: d=>({ a: d.a.b }) });\n         add(\"LI\", { onupdate: [ { a: 1 }, ({ a })=>({ textContent: a }) ] });//`[ { a },` add listener for \"a\" see `mapUpdate`\n     mount(document.body);\n     update(({ a })=> { a: ++a });"
            ],
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 438,
            "description": "Methods returns if it was `onupdate` used",
            "itemtype": "method",
            "name": "isStatic",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "- If there is some listeners `onupdate`",
                "type": "Boolean"
            },
            "class": "$dom.component"
        },
        {
            "file": "bin\\$dom_component.js",
            "line": 450,
            "description": "Procedure for merging object into the element properties.\nVery simple example: `$dom.assign(document.body, { className: \"test\" });` is equivalent to `document.body.className= \"test\";`.\nIt is not deep copy in general, but it supports `style`, `style_vars` and `dataset` objects (see below).",
            "itemtype": "method",
            "name": "assign",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "NodeElement"
                },
                {
                    "name": "object_attributes",
                    "description": "- Object shall holds **NodeElement** properties like `className`, `textContent`, ...\n - For `dataset` can be used also `Object` notation: `$dom.assign(document.getElementById(\"ID\"), { dataset: { test: \"TEST\" } }); //<p id=\"ID\" data-test=\"TEST\"></p>`.\n - The same notation can be used for **CSS variables** (the key is called `style_vars`).\n - **IMPORTANT CHANGE**: Key `style` also supports **text**, so `$dom.assign(el, { style: \"color: red;\" });` and `$dom.assign(el, { style: { color: \"red\" } })` is equivalent to `el.setAttribute(\"style\", \"color: red;\");`\n - **IMPORTANT DIFFERENCE**: `classList` accepts *Object* in the form of `class_name: -1|0|1` where '-1' means `el.classList(class_name)` others `el.classList(class_name, Booleans(...))`\n - *Speed optimalization*: It is recommended to use `textContent` (instead of `innerText`) and `$dom.add` or `$dom.component` (instead of `innerHTML`).",
                    "type": "...Object"
                }
            ],
            "example": [
                "\n     const el= document.body;\n     const onclick= function(){ console.log(this.dataset.js_param); };\n     $dom.assign(el, { textContent: \"BODY\", style: \"color: red;\", dataset: { js_param: \"CLICKED\" }, onclick });\n     //result HTML: <body style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     //console output on click: \"CLICKED\"\n     $dom.assign(el, { classList: { testClass: -1 } });\n     //result HTML: <body class=\"testClass\" style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     $dom.assign(el, { classList: { testClass: -1 } });\n     //result HTML: <body class=\"\" style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     $dom.assign(el, { classList: { testClass: true } });//or 1\n     //result HTML: <body class=\"testClass\" style=\"color: red;\" data-js_param=\"CLICKED\">BODY</body>\n     //..."
            ],
            "class": "$dom.{namespace}"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " bin\\$dom_component.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " bin\\$dom_component.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " bin\\$dom_component.js:179"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " bin\\$dom_component.js:326"
        }
    ]
}